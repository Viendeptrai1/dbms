/*
=============================================
PH√ÇN QUY·ªÄN 2 T·∫¶NG - HO√ÄN CH·ªàNH
=============================================
T√≠ch h·ª£p Application Users + SQL Server Security
T·ª± ƒë·ªông GRANT/REVOKE quy·ªÅn khi thay ƒë·ªïi role
=============================================
*/

USE QLNhapHang;
GO

-- =============================================
-- 1. SP T·∫†O USER V√Ä SQL LOGIN ƒê·ªíNG TH·ªúI
-- =============================================
IF OBJECT_ID('dbo.sp_CreateUserWithSQLLogin', 'P') IS NOT NULL
    DROP PROCEDURE dbo.sp_CreateUserWithSQLLogin;
GO

CREATE PROCEDURE sp_CreateUserWithSQLLogin
    @Username VARCHAR(50),
    @Password NVARCHAR(100),  -- Plain text password
    @FullName NVARCHAR(100),
    @RoleName NVARCHAR(20),   -- 'Admin', 'Seller', 'User'
    @IsActive BIT = 1,
    @NewUserID INT OUTPUT,
    @Message NVARCHAR(MAX) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT OFF;
    
    DECLARE @SQL NVARCHAR(MAX);
    DECLARE @DBRole VARCHAR(50);
    DECLARE @RoleID INT;
    DECLARE @Steps NVARCHAR(MAX) = '';
    
    BEGIN TRY
        -- ========================================
        -- VALIDATE
        -- ========================================
        IF EXISTS (SELECT 1 FROM dbo.Users WHERE Username = @Username)
        BEGIN
            SET @Message = N'‚ùå Username [' + @Username + N'] ƒë√£ t·ªìn t·∫°i!';
            SET @NewUserID = -1;
            RETURN;
        END
        
        IF NOT EXISTS (SELECT 1 FROM dbo.Roles WHERE RoleName = @RoleName)
        BEGIN
            SET @Message = N'‚ùå Role [' + @RoleName + N'] kh√¥ng h·ª£p l·ªá! Ch·ªâ ch·∫•p nh·∫≠n: Admin, Seller, User';
            SET @NewUserID = -1;
            RETURN;
        END
        
        SELECT @RoleID = RoleID FROM dbo.Roles WHERE RoleName = @RoleName;
        SET @DBRole = 'dbrole_' + @RoleName;
        
        -- ========================================
        -- T·∫†O APPLICATION USER (T·∫¶NG 1)
        -- ========================================
        BEGIN TRANSACTION AppUserTxn;
        
        INSERT INTO dbo.Users (Username, Password, FullName, IsActive)
        VALUES (@Username, @Password, @FullName, @IsActive);
        
        SET @NewUserID = SCOPE_IDENTITY();
        
        INSERT INTO dbo.UsersRoles (UserID, RoleID)
        VALUES (@NewUserID, @RoleID);
        
        COMMIT TRANSACTION AppUserTxn;
        SET @Steps += N'‚úÖ Application User ƒë√£ t·∫°o' + CHAR(13) + CHAR(10);
        
        -- ========================================
        -- T·∫†O SQL SERVER LOGIN (T·∫¶NG 2)
        -- ========================================
        BEGIN TRY
            IF NOT EXISTS (SELECT 1 FROM sys.server_principals WHERE name = @Username AND type = 'S')
            BEGIN
                SET @SQL = N'CREATE LOGIN [' + @Username + N'] WITH PASSWORD = ''' + 
                           @Password + N''', DEFAULT_DATABASE = [QLNhapHang], CHECK_POLICY = OFF;';
                EXEC sp_executesql @SQL;
                SET @Steps += N'‚úÖ SQL Login ƒë√£ t·∫°o' + CHAR(13) + CHAR(10);
            END
            ELSE
                SET @Steps += N'‚ö†Ô∏è SQL Login ƒë√£ t·ªìn t·∫°i, reuse' + CHAR(13) + CHAR(10);
        END TRY
        BEGIN CATCH
            SET @Steps += N'‚ö†Ô∏è Kh√¥ng t·∫°o ƒë∆∞·ª£c SQL Login: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
        END CATCH
        
        -- ========================================
        -- T·∫†O DATABASE USER
        -- ========================================
        BEGIN TRY
            IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name = @Username AND type = 'S')
            BEGIN
                SET @SQL = N'CREATE USER [' + @Username + N'] FOR LOGIN [' + @Username + N'];';
                EXEC sp_executesql @SQL;
                SET @Steps += N'‚úÖ Database User ƒë√£ t·∫°o' + CHAR(13) + CHAR(10);
            END
            ELSE
                SET @Steps += N'‚ö†Ô∏è Database User ƒë√£ t·ªìn t·∫°i' + CHAR(13) + CHAR(10);
        END TRY
        BEGIN CATCH
            SET @Steps += N'‚ö†Ô∏è Kh√¥ng t·∫°o ƒë∆∞·ª£c Database User: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
        END CATCH
        
        -- ========================================
        -- G√ÅN DATABASE ROLE ‚Üí T·ª∞ ƒê·ªòNG GRANT QUY·ªÄN
        -- ========================================
        BEGIN TRY
            IF EXISTS (SELECT 1 FROM sys.database_principals WHERE name = @DBRole AND type = 'R')
            BEGIN
                IF NOT EXISTS (
                    SELECT 1 FROM sys.database_role_members drm
                    JOIN sys.database_principals r ON drm.role_principal_id = r.principal_id
                    JOIN sys.database_principals u ON drm.member_principal_id = u.principal_id
                    WHERE r.name = @DBRole AND u.name = @Username
                )
                BEGIN
                    SET @SQL = N'ALTER ROLE [' + @DBRole + N'] ADD MEMBER [' + @Username + N'];';
                    EXEC sp_executesql @SQL;
                    SET @Steps += N'‚úÖ ƒê√£ g√°n Database Role [' + @DBRole + N']' + CHAR(13) + CHAR(10);
                    SET @Steps += N'   üëâ Quy·ªÅn ƒë√£ ƒë∆∞·ª£c c·∫•p t·ª± ƒë·ªông' + CHAR(13) + CHAR(10);
                END
            END
        END TRY
        BEGIN CATCH
            SET @Steps += N'‚ö†Ô∏è Kh√¥ng g√°n ƒë∆∞·ª£c Database Role: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
        END CATCH
        
        -- ========================================
        -- T·ªîNG K·∫æT
        -- ========================================
        SET @Message = N'üéâ T·∫†O USER TH√ÄNH C√îNG!' + CHAR(13) + CHAR(10) +
                       N'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ' + CHAR(13) + CHAR(10) +
                       @Steps + 
                       CHAR(13) + CHAR(10) +
                       N'üìã TH√îNG TIN:' + CHAR(13) + CHAR(10) +
                       N'  üë§ Username: ' + @Username + CHAR(13) + CHAR(10) +
                       N'  üìù Full Name: ' + @FullName + CHAR(13) + CHAR(10) +
                       N'  üé≠ App Role: ' + @RoleName + CHAR(13) + CHAR(10) +
                       N'  üõ°Ô∏è DB Role: ' + @DBRole + CHAR(13) + CHAR(10);
        
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION AppUserTxn;
            
        SET @Message = N'‚ùå L·ªñI: ' + ERROR_MESSAGE();
        SET @NewUserID = -1;
    END CATCH
END
GO

-- =============================================
-- 2. SP X√ìA USER (HARD/SOFT DELETE)
-- =============================================
IF OBJECT_ID('dbo.sp_DeleteUserComplete', 'P') IS NOT NULL
    DROP PROCEDURE dbo.sp_DeleteUserComplete;
GO

CREATE PROCEDURE sp_DeleteUserComplete
    @Username VARCHAR(50),
    @CurrentUsername VARCHAR(50),  -- Username c·ªßa admin ƒëang th·ª±c hi·ªán
    @DeleteType VARCHAR(10),       -- 'HARD' ho·∫∑c 'SOFT'
    @Message NVARCHAR(MAX) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT OFF;
    
    DECLARE @SQL NVARCHAR(MAX);
    DECLARE @UserID INT;
    DECLARE @DBRole VARCHAR(50);
    DECLARE @RoleName NVARCHAR(20);
    DECLARE @Steps NVARCHAR(MAX) = '';
    
    BEGIN TRY
        -- ========================================
        -- VALIDATE
        -- ========================================
        IF NOT EXISTS (SELECT 1 FROM dbo.Users WHERE Username = @Username)
        BEGIN
            SET @Message = N'‚ùå User [' + @Username + N'] kh√¥ng t·ªìn t·∫°i!';
            RETURN;
        END
        
        -- KH√îNG CHO ADMIN T·ª∞ X√ìA CH√çNH M√åNH
        IF @Username = @CurrentUsername
        BEGIN
            SET @Message = N'‚ùå B·∫†N KH√îNG TH·ªÇ X√ìA CH√çNH M√åNH!' + CHAR(13) + CHAR(10) +
                           N'Vui l√≤ng d√πng t√†i kho·∫£n admin kh√°c ƒë·ªÉ th·ª±c hi·ªán.';
            RETURN;
        END
        
        SELECT @UserID = UserID FROM dbo.Users WHERE Username = @Username;
        
        SELECT @RoleName = r.RoleName
        FROM dbo.UsersRoles ur
        JOIN dbo.Roles r ON ur.RoleID = r.RoleID
        WHERE ur.UserID = @UserID;
        
        SET @DBRole = 'dbrole_' + @RoleName;
        
        -- ========================================
        -- SOFT DELETE
        -- ========================================
        IF @DeleteType = 'SOFT'
        BEGIN
            BEGIN TRANSACTION SoftDeleteTxn;
            
            -- Disable SQL Login (n·∫øu c√≥)
            BEGIN TRY
                IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = @Username AND type = 'S')
                BEGIN
                    SET @SQL = N'ALTER LOGIN [' + @Username + N'] DISABLE;';
                    EXEC sp_executesql @SQL;
                    SET @Steps += N'‚úÖ SQL Login ƒë√£ DISABLE' + CHAR(13) + CHAR(10);
                END
            END TRY
            BEGIN CATCH
                SET @Steps += N'‚ö†Ô∏è Kh√¥ng DISABLE ƒë∆∞·ª£c Login: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
            END CATCH
            
            -- ƒê√°nh d·∫•u inactive trong app
            UPDATE dbo.Users 
            SET IsActive = 0,
                Username = Username + '_DELETED_' + CONVERT(VARCHAR(20), GETDATE(), 112) + '_' + CONVERT(VARCHAR(20), @UserID)
            WHERE UserID = @UserID;
            
            COMMIT TRANSACTION SoftDeleteTxn;
            SET @Steps += N'‚úÖ User ƒë√£ ƒë√°nh d·∫•u INACTIVE' + CHAR(13) + CHAR(10);
            
            SET @Message = N'‚úÖ SOFT DELETE TH√ÄNH C√îNG!' + CHAR(13) + CHAR(10) +
                           N'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ' + CHAR(13) + CHAR(10) +
                           @Steps +
                           CHAR(13) + CHAR(10) +
                           N'üìå L∆∞u √Ω:' + CHAR(13) + CHAR(10) +
                           N'  ‚Ä¢ User kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p' + CHAR(13) + CHAR(10) +
                           N'  ‚Ä¢ D·ªØ li·ªáu v·∫´n ƒë∆∞·ª£c gi·ªØ l·∫°i' + CHAR(13) + CHAR(10) +
                           N'  ‚Ä¢ SQL Login b·ªã DISABLE' + CHAR(13) + CHAR(10) +
                           N'  ‚Ä¢ C√≥ th·ªÉ kh√¥i ph·ª•c sau';
            RETURN;
        END
        
        -- ========================================
        -- HARD DELETE
        -- ========================================
        IF @DeleteType = 'HARD'
        BEGIN
            -- X√≥a SQL Server objects tr∆∞·ªõc (bottom-up)
            
            -- 1. DROP MEMBER kh·ªèi Database Role
            BEGIN TRY
                IF EXISTS (
                    SELECT 1 FROM sys.database_role_members drm
                    JOIN sys.database_principals r ON drm.role_principal_id = r.principal_id
                    JOIN sys.database_principals u ON drm.member_principal_id = u.principal_id
                    WHERE r.name = @DBRole AND u.name = @Username
                )
                BEGIN
                    SET @SQL = N'ALTER ROLE [' + @DBRole + N'] DROP MEMBER [' + @Username + N'];';
                    EXEC sp_executesql @SQL;
                    SET @Steps += N'‚úÖ ƒê√£ r·ªùi Database Role' + CHAR(13) + CHAR(10);
                    SET @Steps += N'   üëâ Quy·ªÅn ƒë√£ b·ªã thu h·ªìi t·ª± ƒë·ªông' + CHAR(13) + CHAR(10);
                END
            END TRY
            BEGIN CATCH
                SET @Steps += N'‚ö†Ô∏è Kh√¥ng DROP MEMBER ƒë∆∞·ª£c: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
            END CATCH
            
            -- 2. DROP DATABASE USER
            BEGIN TRY
                IF EXISTS (SELECT 1 FROM sys.database_principals WHERE name = @Username AND type = 'S')
                BEGIN
                    SET @SQL = N'DROP USER [' + @Username + N'];';
                    EXEC sp_executesql @SQL;
                    SET @Steps += N'‚úÖ Database User ƒë√£ x√≥a' + CHAR(13) + CHAR(10);
                END
            END TRY
            BEGIN CATCH
                SET @Steps += N'‚ö†Ô∏è Kh√¥ng DROP USER ƒë∆∞·ª£c: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
            END CATCH
            
            -- 3. DROP SQL LOGIN
            BEGIN TRY
                IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = @Username AND type = 'S')
                BEGIN
                    SET @SQL = N'DROP LOGIN [' + @Username + N'];';
                    EXEC sp_executesql @SQL;
                    SET @Steps += N'‚úÖ SQL Login ƒë√£ x√≥a' + CHAR(13) + CHAR(10);
                END
            END TRY
            BEGIN CATCH
                SET @Steps += N'‚ö†Ô∏è Kh√¥ng DROP LOGIN ƒë∆∞·ª£c: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
            END CATCH
            
            -- 4. X√≥a Application data
            BEGIN TRANSACTION HardDeleteTxn;
            
            DELETE FROM dbo.UsersRoles WHERE UserID = @UserID;
            SET @Steps += N'‚úÖ UsersRoles ƒë√£ x√≥a' + CHAR(13) + CHAR(10);
            
            DELETE FROM dbo.Users WHERE UserID = @UserID;
            SET @Steps += N'‚úÖ Users ƒë√£ x√≥a' + CHAR(13) + CHAR(10);
            
            COMMIT TRANSACTION HardDeleteTxn;
            
            SET @Message = N'‚úÖ HARD DELETE HO√ÄN T·∫§T!' + CHAR(13) + CHAR(10) +
                           N'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ' + CHAR(13) + CHAR(10) +
                           @Steps +
                           CHAR(13) + CHAR(10) +
                           N'‚ö†Ô∏è L∆∞u √Ω:' + CHAR(13) + CHAR(10) +
                           N'  ‚Ä¢ User ƒë√£ b·ªã x√≥a vƒ©nh vi·ªÖn' + CHAR(13) + CHAR(10) +
                           N'  ‚Ä¢ SQL Login/User ƒë√£ x√≥a' + CHAR(13) + CHAR(10) +
                           N'  ‚Ä¢ KH√îNG TH·ªÇ HO√ÄN T√ÅC!';
            RETURN;
        END
        
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;
            
        SET @Message = N'‚ùå L·ªñI: ' + ERROR_MESSAGE();
    END CATCH
END
GO

-- =============================================
-- 3. SP THAY ƒê·ªîI ROLE HO√ÄN CH·ªàNH
-- =============================================
IF OBJECT_ID('dbo.sp_ChangeUserRoleComplete', 'P') IS NOT NULL
    DROP PROCEDURE dbo.sp_ChangeUserRoleComplete;
GO

CREATE PROCEDURE sp_ChangeUserRoleComplete
    @Username NVARCHAR(50),
    @NewRoleName NVARCHAR(20),
    @CurrentUsername VARCHAR(50),  -- Username c·ªßa admin ƒëang th·ª±c hi·ªán
    @Message NVARCHAR(MAX) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @SQL NVARCHAR(MAX);
    DECLARE @UserID INT;
    DECLARE @OldRoleName NVARCHAR(20);
    DECLARE @OldDBRole VARCHAR(50);
    DECLARE @NewDBRole VARCHAR(50);
    DECLARE @NewRoleID INT;
    DECLARE @Steps NVARCHAR(MAX) = '';
    
    BEGIN TRY
        -- ========================================
        -- VALIDATE
        -- ========================================
        IF NOT EXISTS (SELECT 1 FROM dbo.Users WHERE Username = @Username)
        BEGIN
            SET @Message = N'‚ùå User kh√¥ng t·ªìn t·∫°i!';
            RETURN;
        END
        
        -- KH√îNG CHO ADMIN T·ª∞ THAY ƒê·ªîI ROLE CH√çNH M√åNH
        IF @Username = @CurrentUsername
        BEGIN
            SET @Message = N'‚ùå B·∫†N KH√îNG TH·ªÇ THAY ƒê·ªîI ROLE CH√çNH M√åNH!' + CHAR(13) + CHAR(10) +
                           N'Vui l√≤ng d√πng t√†i kho·∫£n admin kh√°c ƒë·ªÉ th·ª±c hi·ªán.';
            RETURN;
        END
        
        IF NOT EXISTS (SELECT 1 FROM dbo.Roles WHERE RoleName = @NewRoleName)
        BEGIN
            SET @Message = N'‚ùå Role m·ªõi kh√¥ng h·ª£p l·ªá!';
            RETURN;
        END
        
        SELECT @UserID = UserID FROM dbo.Users WHERE Username = @Username;
        
        SELECT @OldRoleName = r.RoleName
        FROM dbo.UsersRoles ur
        JOIN dbo.Roles r ON ur.RoleID = r.RoleID
        WHERE ur.UserID = @UserID;
        
        IF @OldRoleName = @NewRoleName
        BEGIN
            SET @Message = N'‚ÑπÔ∏è User ƒë√£ c√≥ role [' + @NewRoleName + N'] r·ªìi!';
            RETURN;
        END
        
        SET @OldDBRole = 'dbrole_' + @OldRoleName;
        SET @NewDBRole = 'dbrole_' + @NewRoleName;
        
        SELECT @NewRoleID = RoleID FROM dbo.Roles WHERE RoleName = @NewRoleName;
        
        -- ========================================
        -- THAY ƒê·ªîI SQL DATABASE ROLE (T·∫¶NG 2)
        -- ========================================
        
        -- R·ªùi role c≈©
        BEGIN TRY
            IF EXISTS (
                SELECT 1 FROM sys.database_role_members drm
                JOIN sys.database_principals r ON drm.role_principal_id = r.principal_id
                JOIN sys.database_principals u ON drm.member_principal_id = u.principal_id
                WHERE r.name = @OldDBRole AND u.name = @Username
            )
            BEGIN
                SET @SQL = N'ALTER ROLE [' + @OldDBRole + N'] DROP MEMBER [' + @Username + N'];';
                EXEC sp_executesql @SQL;
                SET @Steps += N'‚úÖ ƒê√£ r·ªùi role c≈© [' + @OldDBRole + N']' + CHAR(13) + CHAR(10);
                SET @Steps += N'   üëâ Quy·ªÅn ' + @OldRoleName + N' ƒë√£ b·ªã thu h·ªìi' + CHAR(13) + CHAR(10);
            END
        END TRY
        BEGIN CATCH
            SET @Steps += N'‚ö†Ô∏è Kh√¥ng r·ªùi ƒë∆∞·ª£c role c≈©: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
        END CATCH
        
        -- V√†o role m·ªõi
        BEGIN TRY
            IF EXISTS (SELECT 1 FROM sys.database_principals WHERE name = @NewDBRole AND type = 'R')
            BEGIN
                IF NOT EXISTS (
                    SELECT 1 FROM sys.database_role_members drm
                    JOIN sys.database_principals r ON drm.role_principal_id = r.principal_id
                    JOIN sys.database_principals u ON drm.member_principal_id = u.principal_id
                    WHERE r.name = @NewDBRole AND u.name = @Username
                )
                BEGIN
                    SET @SQL = N'ALTER ROLE [' + @NewDBRole + N'] ADD MEMBER [' + @Username + N'];';
                    EXEC sp_executesql @SQL;
                    SET @Steps += N'‚úÖ ƒê√£ v√†o role m·ªõi [' + @NewDBRole + N']' + CHAR(13) + CHAR(10);
                    SET @Steps += N'   üëâ Quy·ªÅn ' + @NewRoleName + N' ƒë√£ ƒë∆∞·ª£c c·∫•p' + CHAR(13) + CHAR(10);
                END
            END
        END TRY
        BEGIN CATCH
            SET @Steps += N'‚ö†Ô∏è Kh√¥ng v√†o ƒë∆∞·ª£c role m·ªõi: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
        END CATCH
        
        -- ========================================
        -- C·∫¨P NH·∫¨T APPLICATION ROLE (T·∫¶NG 1)
        -- ========================================
        BEGIN TRANSACTION ChangeRoleTxn;
        
        DELETE FROM dbo.UsersRoles WHERE UserID = @UserID;
        
        INSERT INTO dbo.UsersRoles (UserID, RoleID)
        VALUES (@UserID, @NewRoleID);
        
        COMMIT TRANSACTION ChangeRoleTxn;
        SET @Steps += N'‚úÖ Application role ƒë√£ c·∫≠p nh·∫≠t' + CHAR(13) + CHAR(10);
        
        -- ========================================
        -- T·ªîNG K·∫æT
        -- ========================================
        SET @Message = N'üéâ THAY ƒê·ªîI ROLE TH√ÄNH C√îNG!' + CHAR(13) + CHAR(10) +
                       N'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ' + CHAR(13) + CHAR(10) +
                       @Steps +
                       CHAR(13) + CHAR(10) +
                       N'üìã TH√îNG TIN:' + CHAR(13) + CHAR(10) +
                       N'  üë§ Username: ' + @Username + CHAR(13) + CHAR(10) +
                       N'  üîÑ Role: ' + @OldRoleName + N' ‚Üí ' + @NewRoleName + CHAR(13) + CHAR(10) +
                       N'  üõ°Ô∏è DB Role: ' + @OldDBRole + N' ‚Üí ' + @NewDBRole;
        
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION ChangeRoleTxn;
            
        SET @Message = N'‚ùå L·ªñI: ' + ERROR_MESSAGE();
    END CATCH
END
GO

-- =============================================
-- 4. SP T·∫†O SQL LOGIN CHO USER ƒê√É T·ªíN T·∫†I
-- =============================================
IF OBJECT_ID('dbo.sp_CreateSQLLoginForExistingUser', 'P') IS NOT NULL
    DROP PROCEDURE dbo.sp_CreateSQLLoginForExistingUser;
GO

CREATE PROCEDURE sp_CreateSQLLoginForExistingUser
    @Username VARCHAR(50),
    @Password NVARCHAR(100),  -- Plain text password cho SQL login
    @Message NVARCHAR(MAX) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @SQL NVARCHAR(MAX);
    DECLARE @RoleName NVARCHAR(20);
    DECLARE @DBRole VARCHAR(50);
    DECLARE @Steps NVARCHAR(MAX) = '';
    
    BEGIN TRY
        -- ========================================
        -- VALIDATE
        -- ========================================
        IF NOT EXISTS (SELECT 1 FROM dbo.Users WHERE Username = @Username)
        BEGIN
            SET @Message = N'‚ùå User [' + @Username + N'] kh√¥ng t·ªìn t·∫°i trong b·∫£ng Users!';
            RETURN;
        END
        
        -- L·∫•y role c·ªßa user
        SELECT @RoleName = r.RoleName
        FROM dbo.Users u
        JOIN dbo.UsersRoles ur ON u.UserID = ur.UserID
        JOIN dbo.Roles r ON ur.RoleID = r.RoleID
        WHERE u.Username = @Username;
        
        SET @DBRole = 'dbrole_' + @RoleName;
        
        -- ========================================
        -- T·∫†O SQL SERVER LOGIN
        -- ========================================
        IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = @Username AND type = 'S')
        BEGIN
            SET @Steps += N'‚ö†Ô∏è SQL Login [' + @Username + N'] ƒë√£ t·ªìn t·∫°i' + CHAR(13) + CHAR(10);
        END
        ELSE
        BEGIN
            BEGIN TRY
                SET @SQL = N'CREATE LOGIN [' + @Username + N'] WITH PASSWORD = ''' + 
                           @Password + N''', DEFAULT_DATABASE = [QLNhapHang], CHECK_POLICY = OFF;';
                EXEC sp_executesql @SQL;
                SET @Steps += N'‚úÖ SQL Login ƒë√£ t·∫°o' + CHAR(13) + CHAR(10);
            END TRY
            BEGIN CATCH
                SET @Steps += N'‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c SQL Login: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
                SET @Message = @Steps;
                RETURN;
            END CATCH
        END
        
        -- ========================================
        -- T·∫†O DATABASE USER
        -- ========================================
        IF EXISTS (SELECT 1 FROM sys.database_principals WHERE name = @Username AND type = 'S')
        BEGIN
            SET @Steps += N'‚ö†Ô∏è Database User [' + @Username + N'] ƒë√£ t·ªìn t·∫°i' + CHAR(13) + CHAR(10);
        END
        ELSE
        BEGIN
            BEGIN TRY
                SET @SQL = N'CREATE USER [' + @Username + N'] FOR LOGIN [' + @Username + N'];';
                EXEC sp_executesql @SQL;
                SET @Steps += N'‚úÖ Database User ƒë√£ t·∫°o' + CHAR(13) + CHAR(10);
            END TRY
            BEGIN CATCH
                SET @Steps += N'‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c Database User: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
                SET @Message = @Steps;
                RETURN;
            END CATCH
        END
        
        -- ========================================
        -- G√ÅN DATABASE ROLE
        -- ========================================
        IF @DBRole IS NOT NULL AND EXISTS (SELECT 1 FROM sys.database_principals WHERE name = @DBRole AND type = 'R')
        BEGIN
            BEGIN TRY
                IF NOT EXISTS (
                    SELECT 1 FROM sys.database_role_members drm
                    JOIN sys.database_principals r ON drm.role_principal_id = r.principal_id
                    JOIN sys.database_principals u ON drm.member_principal_id = u.principal_id
                    WHERE r.name = @DBRole AND u.name = @Username
                )
                BEGIN
                    SET @SQL = N'ALTER ROLE [' + @DBRole + N'] ADD MEMBER [' + @Username + N'];';
                    EXEC sp_executesql @SQL;
                    SET @Steps += N'‚úÖ ƒê√£ g√°n Database Role [' + @DBRole + N']' + CHAR(13) + CHAR(10);
                    SET @Steps += N'   üëâ Quy·ªÅn ƒë√£ ƒë∆∞·ª£c c·∫•p t·ª± ƒë·ªông' + CHAR(13) + CHAR(10);
                END
                ELSE
                BEGIN
                    SET @Steps += N'‚ÑπÔ∏è User ƒë√£ l√† member c·ªßa [' + @DBRole + N']' + CHAR(13) + CHAR(10);
                END
            END TRY
            BEGIN CATCH
                SET @Steps += N'‚ùå Kh√¥ng g√°n ƒë∆∞·ª£c Database Role: ' + ERROR_MESSAGE() + CHAR(13) + CHAR(10);
            END CATCH
        END
        ELSE
        BEGIN
            SET @Steps += N'‚ö†Ô∏è Database Role [' + @DBRole + N'] kh√¥ng t·ªìn t·∫°i!' + CHAR(13) + CHAR(10);
        END
        
        -- ========================================
        -- T·ªîNG K·∫æT
        -- ========================================
        SET @Message = N'‚úÖ HO√ÄN TH√ÄNH!' + CHAR(13) + CHAR(10) +
                       N'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ' + CHAR(13) + CHAR(10) +
                       @Steps +
                       CHAR(13) + CHAR(10) +
                       N'üìã TH√îNG TIN:' + CHAR(13) + CHAR(10) +
                       N'  üë§ Username: ' + @Username + CHAR(13) + CHAR(10) +
                       N'  üé≠ App Role: ' + @RoleName + CHAR(13) + CHAR(10) +
                       N'  üõ°Ô∏è DB Role: ' + @DBRole;
        
    END TRY
    BEGIN CATCH
        SET @Message = N'‚ùå L·ªñI: ' + ERROR_MESSAGE();
    END CATCH
END
GO

-- =============================================
-- 5. SP XEM TH√îNG TIN ƒê·∫¶Y ƒê·ª¶
-- =============================================
IF OBJECT_ID('dbo.sp_GetFullUserInfo', 'P') IS NOT NULL
    DROP PROCEDURE dbo.sp_GetFullUserInfo;
GO

CREATE PROCEDURE sp_GetFullUserInfo
    @Username VARCHAR(50) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT 
        u.UserID,
        u.Username,
        u.FullName,
        CASE WHEN u.IsActive = 1 THEN N'‚úÖ Active' ELSE N'‚ùå Inactive' END AS Status,
        r.RoleName AS AppRole,
        CASE WHEN sl.name IS NOT NULL THEN N'‚úÖ' ELSE N'‚ùå' END AS HasSQLLogin,
        CASE WHEN du.name IS NOT NULL THEN N'‚úÖ' ELSE N'‚ùå' END AS HasDBUser,
        STUFF((
            SELECT ', ' + dp.name
            FROM sys.database_role_members drm
            JOIN sys.database_principals dp ON drm.role_principal_id = dp.principal_id
            WHERE drm.member_principal_id = du.principal_id
            FOR XML PATH('')
        ), 1, 2, '') AS DBRoles
    FROM dbo.Users u
    LEFT JOIN dbo.UsersRoles ur ON u.UserID = ur.UserID
    LEFT JOIN dbo.Roles r ON ur.RoleID = r.RoleID
    LEFT JOIN sys.server_principals sl ON sl.name = u.Username AND sl.type = 'S'
    LEFT JOIN sys.database_principals du ON du.name = u.Username AND du.type = 'S'
    WHERE (@Username IS NULL OR u.Username = @Username)
        AND u.Username NOT LIKE '%_DELETED_%'  -- Kh√¥ng hi·ªÉn th·ªã user ƒë√£ soft delete
    ORDER BY u.Username;
END
GO

-- =============================================
-- GRANT QUY·ªÄN
-- =============================================
GRANT EXECUTE ON OBJECT::dbo.sp_CreateUserWithSQLLogin TO dbrole_Admin;
GRANT EXECUTE ON OBJECT::dbo.sp_DeleteUserComplete TO dbrole_Admin;
GRANT EXECUTE ON OBJECT::dbo.sp_ChangeUserRoleComplete TO dbrole_Admin;
GRANT EXECUTE ON OBJECT::dbo.sp_CreateSQLLoginForExistingUser TO dbrole_Admin;
GRANT EXECUTE ON OBJECT::dbo.sp_GetFullUserInfo TO dbrole_Admin;
GO

PRINT N'';
PRINT N'‚úÖ‚úÖ‚úÖ HO√ÄN T·∫§T SETUP STORED PROCEDURES! ‚úÖ‚úÖ‚úÖ';
PRINT N'';
PRINT N'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';
PRINT N'üìã ƒê√É T·∫†O C√ÅC STORED PROCEDURES:';
PRINT N'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';
PRINT N'  ‚úÖ sp_CreateUserWithSQLLogin';
PRINT N'  ‚úÖ sp_DeleteUserComplete (Hard/Soft)';
PRINT N'  ‚úÖ sp_ChangeUserRoleComplete';
PRINT N'  ‚úÖ sp_CreateSQLLoginForExistingUser';
PRINT N'  ‚úÖ sp_GetFullUserInfo';
PRINT N'';
PRINT N'üîê T√çNH NƒÇNG:';
PRINT N'  ‚Ä¢ T·ª± ƒë·ªông GRANT quy·ªÅn khi ADD v√†o role';
PRINT N'  ‚Ä¢ T·ª± ƒë·ªông REVOKE quy·ªÅn khi DROP kh·ªèi role';
PRINT N'  ‚Ä¢ Admin kh√¥ng th·ªÉ t·ª± x√≥a/s·ª≠a ch√≠nh m√¨nh';
PRINT N'  ‚Ä¢ H·ªó tr·ª£ Hard/Soft Delete';
GO
