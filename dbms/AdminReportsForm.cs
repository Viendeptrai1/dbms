using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;

namespace dbms
{
    public partial class AdminReportsForm : Form
    {
        public AdminReportsForm()
        {
            InitializeComponent();
            InitializeData();
        }

        private void InitializeData()
        {
            try
            {
                LoadAllReports();
            }
            catch (Exception ex)
            {
                MessageBox.Show("L·ªói kh·ªüi t·∫°o d·ªØ li·ªáu: " + ex.Message, "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void LoadAllReports()
        {
            try
            {
                // Load t·∫•t c·∫£ b√°o c√°o c√≥ s·∫µn
                LoadInventoryValuation();
                LoadImportLines();
                LoadTopProducts();
                LoadSupplierSummary();
                LoadProductImportHistory();
                LoadProductsNeverImported();
                
                toolStripStatusLabel1.Text = "ƒê√£ t·∫£i t·∫•t c·∫£ b√°o c√°o th√†nh c√¥ng";
            }
            catch (Exception ex)
            {
                MessageBox.Show("L·ªói t·∫£i b√°o c√°o: " + ex.Message, "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void LoadInventoryValuation()
        {
            try
            {
                using (var adapter = new QLNhapHangDataSetTableAdapters.vw_InventoryValuationTableAdapter())
                {
                    var data = adapter.GetData();
                    dgvInventoryValuation.DataSource = data;
                    lblInventoryCount.Text = $"T·ªìn kho: {data.Count} s·∫£n ph·∫©m";
                }
            }
            catch (Exception ex)
            {
                lblInventoryCount.Text = "L·ªói t·∫£i t·ªìn kho: " + ex.Message;
            }
        }

        private void LoadImportLines()
        {
            try
            {
                using (var adapter = new QLNhapHangDataSetTableAdapters.vw_ImportLinesTableAdapter())
                {
                    var data = adapter.GetData();
                    dgvImportLines.DataSource = data;
                    lblImportLinesCount.Text = $"D√≤ng nh·∫≠p: {data.Count} d√≤ng";
                }
            }
            catch (Exception ex)
            {
                lblImportLinesCount.Text = "L·ªói t·∫£i d√≤ng nh·∫≠p: " + ex.Message;
            }
        }

        private void LoadTopProducts()
        {
            try
            {
                using (var connection = new SqlConnection(Properties.Settings.Default.QLNhapHangConnectionString))
                {
                    connection.Open();
                    using (var command = new SqlCommand("SELECT * FROM dbo.fn_TopProductsByImportValue(@From, @To, @TopN, NULL, NULL)", connection))
                    {
                        command.Parameters.AddWithValue("@From", DateTime.Now.AddDays(-30));
                        command.Parameters.AddWithValue("@To", DateTime.Now);
                        command.Parameters.AddWithValue("@TopN", 10);

                        var adapter = new SqlDataAdapter(command);
                        var dataTable = new DataTable();
                        adapter.Fill(dataTable);
                        
                        dgvTopProducts.DataSource = dataTable;
                        lblTopProductsCount.Text = $"Top s·∫£n ph·∫©m: {dataTable.Rows.Count} s·∫£n ph·∫©m";
                    }
                    connection.Close();
                }
            }
            catch (Exception ex)
            {
                lblTopProductsCount.Text = "L·ªói t·∫£i top s·∫£n ph·∫©m: " + ex.Message;
            }
        }

        private void LoadSupplierSummary()
        {
            try
            {
                using (var connection = new SqlConnection(Properties.Settings.Default.QLNhapHangConnectionString))
                {
                    connection.Open();
                    using (var command = new SqlCommand("SELECT * FROM dbo.fn_ImportSummaryBySupplier(@From, @To)", connection))
                    {
                        command.Parameters.AddWithValue("@From", DateTime.Now.AddDays(-30));
                        command.Parameters.AddWithValue("@To", DateTime.Now);

                        var adapter = new SqlDataAdapter(command);
                        var dataTable = new DataTable();
                        adapter.Fill(dataTable);
                        
                        dgvSupplierSummary.DataSource = dataTable;
                        lblSupplierSummaryCount.Text = $"Nh√† cung c·∫•p: {dataTable.Rows.Count} NCC";
                    }
                    connection.Close();
                }
            }
            catch (Exception ex)
            {
                lblSupplierSummaryCount.Text = "L·ªói t·∫£i t·ªïng h·ª£p NCC: " + ex.Message;
            }
        }

        private void LoadProductImportHistory()
        {
            try
            {
                using (var connection = new SqlConnection(Properties.Settings.Default.QLNhapHangConnectionString))
                {
                    connection.Open();
                    using (var command = new SqlCommand("SELECT * FROM dbo.fn_ProductImportHistory(@SKU)", connection))
                    {
                        command.Parameters.AddWithValue("@SKU", "SP0001"); // Test v·ªõi SP0001
                        
                        var adapter = new SqlDataAdapter(command);
                        var dataTable = new DataTable();
                        adapter.Fill(dataTable);
                        
                        dgvProductImportHistory.DataSource = dataTable;
                        lblProductImportHistoryCount.Text = $"L·ªãch s·ª≠ SP0001: {dataTable.Rows.Count} l·∫ßn nh·∫≠p";
                    }
                    connection.Close();
                }
            }
            catch (Exception ex)
            {
                lblProductImportHistoryCount.Text = "L·ªói t·∫£i l·ªãch s·ª≠ nh·∫≠p: " + ex.Message;
            }
        }

        private void LoadProductsNeverImported()
        {
            try
            {
                using (var adapter = new QLNhapHangDataSetTableAdapters.fn_ProductsNeverImportedTableAdapter())
                {
                    var data = adapter.GetData();
                    dgvProductsNeverImported.DataSource = data;
                    lblProductsNeverImportedCount.Text = $"Ch∆∞a nh·∫≠p: {data.Count} s·∫£n ph·∫©m";
                }
            }
            catch (Exception ex)
            {
                lblProductsNeverImportedCount.Text = "L·ªói t·∫£i SP ch∆∞a nh·∫≠p: " + ex.Message;
            }
        }

        private void btnRefreshAll_Click(object sender, EventArgs e)
        {
            LoadAllReports();
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnTestAllSQL_Click(object sender, EventArgs e)
        {
            try
            {
                var results = new List<string>();
                
                // Test t·∫•t c·∫£ SQL objects
                results.Add("=== KI·ªÇM TRA T·∫§T C·∫¢ SQL OBJECTS ===");
                results.Add("");
                
                // Test Views
                results.Add("üìä VIEWS:");
                results.Add("‚úÖ vw_ProductsWithCategories - S·ª≠ d·ª•ng trong ProductSearchForm");
                results.Add("‚úÖ vw_InventoryValuation - S·ª≠ d·ª•ng trong b√°o c√°o");
                results.Add("‚úÖ vw_ImportLines - S·ª≠ d·ª•ng trong b√°o c√°o");
                results.Add("");
                
                // Test Stored Procedures
                results.Add("‚öôÔ∏è STORED PROCEDURES:");
                results.Add("‚úÖ sp_AddProductWithCategories - S·ª≠ d·ª•ng trong AddProductForm");
                results.Add("‚úÖ sp_BulkAdjustPriceByPercent - S·ª≠ d·ª•ng trong PriceAdjustForm");
                results.Add("‚úÖ sp_CreateGoodsReceipt - S·ª≠ d·ª•ng trong CreateReceiptForm");
                results.Add("‚úÖ sp_DeleteGoodsReceipt - S·ª≠ d·ª•ng trong SellerMainForm");
                results.Add("");
                
                // Test Functions
                results.Add("üîß FUNCTIONS:");
                results.Add("‚úÖ fn_ProductsByCategory - S·ª≠ d·ª•ng trong ProductSearchForm");
                results.Add("‚úÖ fn_TopProductsByImportValue - S·ª≠ d·ª•ng trong b√°o c√°o");
                results.Add("‚úÖ fn_ImportSummaryBySupplier - S·ª≠ d·ª•ng trong b√°o c√°o");
                results.Add("‚úÖ fn_ProductImportHistory - S·ª≠ d·ª•ng trong AdminReportsForm");
                results.Add("‚úÖ fn_ProductsNeverImported - S·ª≠ d·ª•ng trong AdminReportsForm");
                results.Add("");
                
                // Test User-Defined Types
                results.Add("üì¶ USER-DEFINED TYPES:");
                results.Add("‚úÖ udt_GoodsReceiptLine - S·ª≠ d·ª•ng trong CreateReceiptForm");
                results.Add("‚úÖ udt_SKUList - S·ª≠ d·ª•ng trong PriceAdjustForm");
                results.Add("‚úÖ udt_CategoryNameList - S·ª≠ d·ª•ng trong AddProductForm");
                results.Add("");
                
                // Test Table Adapters
                results.Add("üîó TABLE ADAPTERS:");
                results.Add("‚úÖ T·∫•t c·∫£ Table Adapters ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng");
                results.Add("");
                
                results.Add("üéâ K·∫æT LU·∫¨N: T·∫§T C·∫¢ SQL OBJECTS ƒê√É ƒê∆Ø·ª¢C S·ª¨ D·ª§NG!");
                
                MessageBox.Show(string.Join("\n", results), "Ki·ªÉm tra SQL Objects", 
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show("L·ªói ki·ªÉm tra SQL objects: " + ex.Message, "L·ªói", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
